Int i = 0 | 1 | (-1) | 2 | (-2) | ...

Bool b = true | false

String s = "<sequence of letters and numbers>"

Val v = i | s | b 

Var x = <sequence of letters and numbers>

Exp e = v | x | e1 + e2 | e1 * e2 | e1 - e2 | e1 / e2 |
    e1 == e2 | e1 < e2 | e1 and e2 | e1 or e2 | not e

Decl d = var x d | func x1 x2 x3 S d | end declare

Stmt S = x := e |  S1; S2 | if e then S1 else S2 |
    while b do S | skip | declare d S | run x e | print e


exec :: Stmt -> IO()
    - runs given Stmt
    - write expressions (args of PrintStmt) when program is finished

Most of statements acts traditionally and I omit them in description.

PrintStmt does not write but saves strings to be written when program is finished.

x2, x3 in sfunction declaration (DeclFunc) are args in / out,
When function is finished x3 contains return value of this function.

Static visibility of identifiers.

Declared function is interpereted in env where:
- variable "return" is silently declared using newloc to undefined,
- identifier x2 is silently declared using newloc, its value is set when function is called,
- the same function is visible, recursion works 

This statement, '"return" := e', saves result of a function. 

Function call can change only value of address (Loc) pointed by identifier x3 from declaration.

Identifier x3 must exist.

x2 is passed by value, x3 is passed by reference.