printStmt :: Stmt
printStmt =
  SeqStmt
    (PrintStmt (C (String "Słowo")))
    (SeqStmt
      (PrintStmt (C (Int 1)))
      (PrintStmt (C (Bool True))))

powerStmt :: Int -> Int -> Stmt
powerStmt a b =
  BlockStmt
    (DeclVar "x"
      (DeclVar "i"
        (DeclVar "n"
          (DeclVar "c" EmptyDecl))))
    (SeqStmt
      (SeqStmt ("x" := C (Int 1))
        (SeqStmt ("i" := C (Int 0))
          (SeqStmt ("n" := C (Int b)) ("c" := C (Int a)))))
      (IfElseStmt
        (Less (V "n") (C (Int 0)))
        (PrintStmt (C (String "Cant count it")))
        (SeqStmt
          (WhileStmt
            (Less (V "i") (V "n"))
            (SeqStmt
              ("x" := Mul (V "x") (V "c"))
              ("i" := Add (V "i") (C (Int 1)))))
          (PrintStmt (V "x")))))

personStmt :: String -> String -> Stmt
personStmt a b =
    BlockStmt
      (DeclVar "s1"
        (DeclVar "s2"
          (DeclVar "b"
            (DeclVar "w"
              (DeclVar "out" EmptyDecl)))))
      (SeqStmt
        (SeqStmt
          (SeqStmt ("s1" := C (String "; Name: "))
            (SeqStmt ("s2" := C (String "; Surname: "))
              (SeqStmt
                ("b" := C (String "NoName"))
                ("w" := C (String "; I dont belive that")))))
            (SeqStmt ("out" := Add (V "s1") (C (String a)))
              (SeqStmt ("out" := Add (V "out") (V "s2"))
              (SeqStmt ("out" := Add (V "out") (C (String b)))
                (IfStmt
                  (Or (Equal (C (String a)) (V "b")) (Equal (C (String b)) (V "b")))
                  ("out" := Add (V "out") (V "w")))))))
        (PrintStmt (V "out")))

funcStmt :: Int -> Stmt
funcStmt x =
  BlockStmt
    (DeclVar "y"
      (DeclFunc "f" "x" "y"
      (SeqStmt
        ("return" := V "x")
        (WhileStmt
          (Less (V "return") (C (Int 100)))
          ("return" := Mul (V "return") (V "x"))))
          EmptyDecl))
    (SeqStmt
      (FuncStmt "f" (C (Int x)))
      (PrintStmt (V "y")))

rekStmt :: Int -> Int -> Stmt
rekStmt a b =
  BlockStmt
    (DeclVar "y"
      (DeclFunc "f" "x" "y"
        (IfStmt
          (Less (V "x") (C (Int b)))
          (SeqStmt
            (SeqStmt
              ("x" := Add (V "x") (C (Int 1)))
              (FuncStmt "f" (V "x")))
            (PrintStmt (V "x"))))
          EmptyDecl))
      (FuncStmt "f" (C (Int a)))

badStmt :: Stmt
badStmt =
  SeqStmt
    (PrintStmt (C (String "Start")))
    (IfStmt
      (Add (C (Int 2)) (C (Int 2)))
      (PrintStmt (C (String "Zły typ"))))


Uruchamianie Stmt w haskelu:

*Inter> :load inter.hs 
*Inter> exec (rekStmt 5 7) 
7
6

*Inter> exec badStmt
*** Exception: Prelude.undefined
CallStack (from HasCallStack):
  error, called at libraries/base/GHC/Err.hs:78:14 in base:GHC.Err
  undefined, called at inter.hs:78:14 in main:Inter

*Inter> exec (personStmt "Kuba" "XD") 
; Name: Kuba; Surname: XD

*Inter> exec (personStmt "Kuba" "NoName") 
; Name: Kuba; Surname: NoName; I dont belive that

*Inter> exec (powerStmt 2 5)
32